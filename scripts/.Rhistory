}
)
if (interactive()) print(app)
?leaflet
n <- leaflet() %>%
addProviderTiles("Esri.WorldGrayCanvas")%>%
clearBounds()%>%
addMarkers(data=w, icon = ~mapicon[name], popup= ~as.character(popup), group="Redaktionen")%>%
addMarkers(data=x, icon = ~mapicon[namex], popup= ~as.character(popup), group="Meet-ups")%>%
addLayersControl(
overlayGroups = c("Redaktionen", "Meet-ups"),
options = layersControlOptions(collapsed = FALSE)
)
print(n)
library(shiny)
app <- shinyApp(
ui <- fluidPage(leafletOutput('myMap')),
server <- function(input, output) {
map <- n
output$myMap <- renderLeaflet(map)
}
)
if (interactive()) print(app)
n <- leaflet(width = 500, height = 500) %>%
addProviderTiles("Esri.WorldGrayCanvas")%>%
addMarkers(data=w, icon = ~mapicon[name], popup= ~as.character(popup), group="Redaktionen")%>%
addMarkers(data=x, icon = ~mapicon[namex], popup= ~as.character(popup), group="Meet-ups")%>%
addLayersControl(
overlayGroups = c("Redaktionen", "Meet-ups"),
options = layersControlOptions(collapsed = FALSE)
)
print(n)
n <- leaflet(width = 600, height = 600) %>%
addProviderTiles("Esri.WorldGrayCanvas")%>%
addMarkers(data=w, icon = ~mapicon[name], popup= ~as.character(popup), group="Redaktionen")%>%
addMarkers(data=x, icon = ~mapicon[namex], popup= ~as.character(popup), group="Meet-ups")%>%
addLayersControl(
overlayGroups = c("Redaktionen", "Meet-ups"),
options = layersControlOptions(collapsed = FALSE)
)
print(n)
library(shiny)
app <- shinyApp(
ui <- fluidPage(leafletOutput('myMap')),
server <- function(input, output) {
map <- n
output$myMap <- renderLeaflet(map)
}
)
if (interactive()) print(app)
n <- leaflet() %>%
addProviderTiles("Esri.WorldGrayCanvas")%>%
addMarkers(data=w, icon = ~mapicon[name], popup= ~as.character(popup), group="Redaktionen")%>%
addMarkers(data=x, icon = ~mapicon[namex], popup= ~as.character(popup), group="Meet-ups")%>%
addLayersControl(
overlayGroups = c("Redaktionen", "Meet-ups"),
options = layersControlOptions(collapsed = FALSE)
)
print(n)
library(shiny)
app <- shinyApp(
ui <- fluidPage(leafletOutput('myMap')),
server <- function(input, output) {
map <- n
output$myMap <- renderLeaflet(map)
}
)
if (interactive()) print(app)
?renderLeaflet
library(shiny)
app <- shinyApp(
ui <- fluidPage(leafletOutput('myMap')),
server <- function(input, output) {
map <- n
output$myMap <- renderLeaflet(map, width = "100%", height = 400)
}
)
if (interactive()) print(app)
library(shiny)
app <- shinyApp(
ui <- fluidPage(leafletOutput('myMap', width = "100%", height = 400)),
server <- function(input, output) {
map <- n
output$myMap <- renderLeaflet(map)
}
)
if (interactive()) print(app)
app <- shinyApp(
ui <- fluidPage(leafletOutput('myMap', width = "100%", height = 500)),
server <- function(input, output) {
map <- n
output$myMap <- renderLeaflet(map)
}
)
if (interactive()) print(app)
app <- shinyApp(
ui <- fluidPage(leafletOutput('myMap', width = "80%", height = 600)),
server <- function(input, output) {
map <- n
output$myMap <- renderLeaflet(map)
}
)
if (interactive()) print(app)
app <- shinyApp(
ui <- fluidPage(leafletOutput('myMap', width = "70%", height = 600)),
server <- function(input, output) {
map <- n
output$myMap <- renderLeaflet(map)
}
)
if (interactive()) print(app)
app <- shinyApp(
ui <- fluidPage(leafletOutput('myMap', width = "60%", height = 650)),
server <- function(input, output) {
map <- n
output$myMap <- renderLeaflet(map)
}
)
if (interactive()) print(app)
app <- shinyApp(
ui <- fluidPage(leafletOutput('myMap', width = "50%", height = 650)),
server <- function(input, output) {
map <- n
output$myMap <- renderLeaflet(map)
}
)
if (interactive()) print(app)
app <- shinyApp(
ui <- fluidPage(leafletOutput('myMap', width = "55%", height = 650)),
server <- function(input, output) {
map <- n
output$myMap <- renderLeaflet(map)
}
)
if (interactive()) print(app)
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='datentaeterandjournocode',
token='A90C6CFB0FD6138FCFEA6713A5AD6711',
secret='Cqm6PZ7vog0uxcit3fLE0CZwOwzi/USTCvW4H57s')
library(shinyapps)
devtools::install_github('rstudio/shinyapps')
library(devtools)
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='datentaeterandjournocode',
token='A90C6CFB0FD6138FCFEA6713A5AD6711',
secret='Cqm6PZ7vog0uxcit3fLE0CZwOwzi/USTCvW4H57s')
library(shinyapps)
shinyapps::deployApp('path/to/your/app')
install.packages('devtools')
install.packages('devtools')
install.packages("devtools")
devtools::install_github('rstudio/shinyapps')
library(leaflet)
m <- leaflet() %>%
addProviderTiles("Stamen.TonerBackground")  # Add default OpenStreetMap map tiles
m
mapicon <- iconList(
br = makeIcon(iconUrl = "/Users/MarieLou/Desktop/br.png", 60, 60),
srf = makeIcon(iconUrl = "/Users/MarieLou/Desktop/srf.jpg", 80, 80),
mopo = makeIcon(iconUrl = "/Users/MarieLou/Desktop/mopo.jpg", 60, 60),
zeit = makeIcon(iconUrl = "/Users/MarieLou/Desktop/zeit.png", 120, 120),
journo = makeIcon(iconUrl = "/Users/MarieLou/Desktop/journo.png", 60, 60),
spon = makeIcon(iconUrl = "/Users/MarieLou/Desktop/spon.jpg", 60, 60)
)
w <- sp::SpatialPointsDataFrame(
cbind(
c(8.560453, 11.554090, 13.398040, 13.381030, 10.004017), #long
c(47.417563, 48.144240, 52.507620, 52.505190, 53.545762) #lat
),
data.frame(name = factor(
c("srf", "br", "mopo", "zeit", "spon")
),
popup = c("SRF Data <br> Z端rich <br> juhu",
"BR Data <br> M端nchen <br> fghj",
"MoPo <br> Berlin <br> qwer",
"Zeit Data <br> Berlin <br> sdfghjkl",
"SPON <br> Hamburg <br> dfghj"
)
)
)
x <- sp::SpatialPointsDataFrame(
cbind(
c(7.417445), #long
c(51.494049) #lat
),
data.frame(namex = factor(
c("journo")
),
popup = c("journocode <br> Dortmund <br> juhu"
)
)
)
n <- leaflet() %>%
addProviderTiles("Esri.WorldGrayCanvas")%>%
addMarkers(data=w, icon = ~mapicon[name], popup= ~as.character(popup), group="Redaktionen")%>%
addMarkers(data=x, icon = ~mapicon[namex], popup= ~as.character(popup), group="Meet-ups")%>%
addLayersControl(
overlayGroups = c("Redaktionen", "Meet-ups"),
options = layersControlOptions(collapsed = FALSE)
)
print(n)
library(shiny)
app <- shinyApp(
ui <- fluidPage(leafletOutput('myMap', width = "55%", height = 650)),
server <- function(input, output) {
map <- n
output$myMap <- renderLeaflet(map)
}
)
if (interactive()) print(app)
shinyapps::deployApp('path/to/your/app')
devtools::install_github('rstudio/shinyapps')
devtools::install_github("shinyapps", username = "rstudio")
if (!require("devtools"))
install.packages("devtools")
devtools::install_github("rstudio/rsconnect")
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='datentaeterandjournocode',
token='A90C6CFB0FD6138FCFEA6713A5AD6711',
secret='Cqm6PZ7vog0uxcit3fLE0CZwOwzi/USTCvW4H57s')
library(shinyapps)
shinyapps::deployApp('path/to/your/app')
source('~/.active-rstudio-document')
print(n)
library(shiny)
app <- shinyApp(
ui <- fluidPage(leafletOutput('myMap', width = "55%", height = 650)),
server <- function(input, output) {
map <- n
output$myMap <- renderLeaflet(map)
}
)
if (interactive()) print(app)
m <- leaflet() %>%
addProviderTiles("Stamen.TonerBackground")  # Add default OpenStreetMap map tiles
m
mapicon <- iconList(
br = makeIcon(iconUrl = "/Users/MarieLou/Desktop/br.png", 60, 60),
srf = makeIcon(iconUrl = "/Users/MarieLou/Desktop/srf.jpg", 80, 80),
mopo = makeIcon(iconUrl = "/Users/MarieLou/Desktop/mopo.jpg", 60, 60),
zeit = makeIcon(iconUrl = "/Users/MarieLou/Desktop/zeit.png", 120, 120),
journo = makeIcon(iconUrl = "/Users/MarieLou/Desktop/journo.png", 60, 60),
spon = makeIcon(iconUrl = "/Users/MarieLou/Desktop/spon.jpg", 60, 60)
)
w <- sp::SpatialPointsDataFrame(
cbind(
c(8.560453, 11.554090, 13.398040, 13.381030, 10.004017), #long
c(47.417563, 48.144240, 52.507620, 52.505190, 53.545762) #lat
),
data.frame(name = factor(
c("srf", "br", "mopo", "zeit", "spon")
),
popup = c("SRF Data <br> Z端rich <br> juhu",
"BR Data <br> M端nchen <br> fghj",
"MoPo <br> Berlin <br> qwer",
"Zeit Data <br> Berlin <br> sdfghjkl",
"SPON <br> Hamburg <br> dfghj"
)
)
)
x <- sp::SpatialPointsDataFrame(
cbind(
c(7.417445), #long
c(51.494049) #lat
),
data.frame(namex = factor(
c("journo")
),
popup = c("journocode <br> Dortmund <br> juhu"
)
)
)
n <- leaflet() %>%
addProviderTiles("Esri.WorldGrayCanvas")%>%
addMarkers(data=w, icon = ~mapicon[name], popup= ~as.character(popup), group="Redaktionen")%>%
addMarkers(data=x, icon = ~mapicon[namex], popup= ~as.character(popup), group="Meet-ups")%>%
addLayersControl(
overlayGroups = c("Redaktionen", "Meet-ups"),
options = layersControlOptions(collapsed = FALSE)
)
print(n)
library(shiny)
app <- shinyApp(
ui <- fluidPage(leafletOutput('myMap', width = "55%", height = 650)),
server <- function(input, output) {
map <- n
output$myMap <- renderLeaflet(map)
}
)
if (interactive()) print(app)
library(shinyapps)
shinyapps::deployApp('/Users/MarieLou/Desktop/Versuch3000')
shinyapps::deployApp('/Users/MarieLou/Desktop/Versuch3000.R')
if (interactive()) print(app)
runApp()
if (interactive()) print(app)
if (interactive()) print(app)
rsconnect::deployApp
setwd('/Users/MarieLou/Desktop/Versuch3000')
source('~/Desktop/Versuch3000.R')
print(n)
rsconnect::deployApp
deployApp()
library(leaflet)
m <- leaflet() %>%
addProviderTiles("Stamen.TonerBackground")  # Add default OpenStreetMap map tiles
m
mapicon <- iconList(
br = makeIcon(iconUrl = "/Users/MarieLou/Desktop/br.png", 60, 60),
srf = makeIcon(iconUrl = "/Users/MarieLou/Desktop/srf.jpg", 80, 80),
mopo = makeIcon(iconUrl = "/Users/MarieLou/Desktop/mopo.jpg", 60, 60),
zeit = makeIcon(iconUrl = "/Users/MarieLou/Desktop/zeit.png", 120, 120),
journo = makeIcon(iconUrl = "/Users/MarieLou/Desktop/journo.png", 60, 60),
spon = makeIcon(iconUrl = "/Users/MarieLou/Desktop/spon.jpg", 60, 60)
)
w <- sp::SpatialPointsDataFrame(
cbind(
c(8.560453, 11.554090, 13.398040, 13.381030, 10.004017), #long
c(47.417563, 48.144240, 52.507620, 52.505190, 53.545762) #lat
),
data.frame(name = factor(
c("srf", "br", "mopo", "zeit", "spon")
),
popup = c("SRF Data <br> Z端rich <br> juhu",
"BR Data <br> M端nchen <br> fghj",
"MoPo <br> Berlin <br> qwer",
"Zeit Data <br> Berlin <br> sdfghjkl",
"SPON <br> Hamburg <br> dfghj"
)
)
)
x <- sp::SpatialPointsDataFrame(
cbind(
c(7.417445), #long
c(51.494049) #lat
),
data.frame(namex = factor(
c("journo")
),
popup = c("journocode <br> Dortmund <br> juhu"
)
)
)
n <- leaflet() %>%
addProviderTiles("Esri.WorldGrayCanvas")%>%
addMarkers(data=w, icon = ~mapicon[name], popup= ~as.character(popup), group="Redaktionen")%>%
addMarkers(data=x, icon = ~mapicon[namex], popup= ~as.character(popup), group="Meet-ups")%>%
addLayersControl(
overlayGroups = c("Redaktionen", "Meet-ups"),
options = layersControlOptions(collapsed = FALSE)
)
print(n)
library(shiny)
app <- shinyApp(
ui <- fluidPage(leafletOutput('myMap', width = "55%", height = 650)),
server <- function(input, output) {
map <- n
output$myMap <- renderLeaflet(map)
}
)
if (interactive()) print(app)
shinyApp(ui = ui, server = server)
if (!require("devtools"))
install.packages("devtools")
devtools::install_github("rstudio/rsconnect")
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='datentaeterandjournocode',
token='A90C6CFB0FD6138FCFEA6713A5AD6711',
secret='Cqm6PZ7vog0uxcit3fLE0CZwOwzi/USTCvW4H57s')
library(shiny)
app <- shinyApp(
ui <- fluidPage(leafletOutput('myMap', width = "55%", height = 650)),
server <- function(input, output) {
map <- n
output$myMap <- renderLeaflet(map)
}
)
if (interactive()) print(app)
library(shiny)
app <- shinyApp(
ui <- fluidPage(leafletOutput('myMap', width = "55%", height = 650)),
server <- function(input, output) {
map <- n
output$myMap <- renderLeaflet(map)
}
)
#if (interactive()) print(app)
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
source('~/Desktop/Versuch3000.R')
shinyApp(ui = ui, server = server)
install.packages("leaflet")
library(leaflet)
m <- leaflet() %>%
addProviderTiles("Stamen.TonerBackground")  # Add default OpenStreetMap map tiles
m
mapicon <- iconList(
br = makeIcon(iconUrl = "/Users/MarieLou/Desktop/br.png", 60, 60),
srf = makeIcon(iconUrl = "/Users/MarieLou/Desktop/srf.jpg", 80, 80),
mopo = makeIcon(iconUrl = "/Users/MarieLou/Desktop/mopo.jpg", 60, 60),
zeit = makeIcon(iconUrl = "/Users/MarieLou/Desktop/zeit.png", 120, 120),
journo = makeIcon(iconUrl = "/Users/MarieLou/Desktop/journo.png", 60, 60),
spon = makeIcon(iconUrl = "/Users/MarieLou/Desktop/spon.jpg", 60, 60)
)
w <- sp::SpatialPointsDataFrame(
cbind(
c(8.560453, 11.554090, 13.398040, 13.381030, 10.004017), #long
c(47.417563, 48.144240, 52.507620, 52.505190, 53.545762) #lat
),
data.frame(name = factor(
c("srf", "br", "mopo", "zeit", "spon")
),
popup = c("SRF Data <br> Z端rich <br> juhu",
"BR Data <br> M端nchen <br> fghj",
"MoPo <br> Berlin <br> qwer",
"Zeit Data <br> Berlin <br> sdfghjkl",
"SPON <br> Hamburg <br> dfghj"
)
)
)
x <- sp::SpatialPointsDataFrame(
cbind(
c(7.417445), #long
c(51.494049) #lat
),
data.frame(namex = factor(
c("journo")
),
popup = c("journocode <br> Dortmund <br> juhu"
)
)
)
n <- leaflet() %>%
addProviderTiles("Esri.WorldGrayCanvas")%>%
addMarkers(data=w, icon = ~mapicon[name], popup= ~as.character(popup), group="Redaktionen")%>%
addMarkers(data=x, icon = ~mapicon[namex], popup= ~as.character(popup), group="Meet-ups")%>%
addLayersControl(
overlayGroups = c("Redaktionen", "Meet-ups"),
options = layersControlOptions(collapsed = FALSE)
)
print(n)
library(shiny)
app <- shinyApp(
ui <- fluidPage(leafletOutput('myMap', width = "70%", height = 650)),
server <- function(input, output) {
map <- n
output$myMap <- renderLeaflet(map)
}
)
#if (interactive()) print(app)
shinyApp(ui = ui, server = server)
source('~/Desktop/Versuch3000.R')
shinyApp(ui = ui, server = server)
app <- shinyApp(
ui <- fluidPage(leafletOutput('myMap', width = "60%", height = 650)),
server <- function(input, output) {
map <- n
output$myMap <- renderLeaflet(map)
}
)
#if (interactive()) print(app)
shinyApp(ui = ui, server = server)
shiny::runApp('Desktop/shiny2')
shiny::runApp('Desktop/shiny2')
shiny::runApp('Desktop/shiny2')
shiny::runApp('Desktop/shiny2')
shiny::runApp('Desktop/shiny2')
shiny::runApp('Desktop/shiny2')
shiny::runApp('Desktop/shiny2')
shiny::runApp('Desktop/shiny2')
shiny::runApp('Desktop/shiny2')
shiny::runApp('Desktop/shiny2')
shiny::runApp('Desktop/shiny2')
shiny::runApp('Desktop/shiny2')
?popupOptions
?popup
shiny::runApp('Desktop/shiny2')
shiny::runApp('Desktop/shiny2')
shiny::runApp('Desktop/shiny2')
shiny::runApp('Desktop/shiny2')
shiny::runApp('Desktop/shiny2')
shiny::runApp('Desktop/shiny2')
shiny::runApp('Desktop/shiny2')
shiny::runApp('Desktop/shiny2')
shiny::runApp('Desktop/shiny2')
shiny::runApp('Desktop/shiny2')
shiny::runApp('Desktop/shiny2')
shiny::runApp('Desktop/shiny2')
shiny::runApp('Desktop/shiny2')
shiny::runApp('Desktop/shiny2')
shiny::runApp('Desktop/shiny2')
shiny::runApp('Desktop/shiny2')
shiny::runApp('Desktop/shiny2')
shiny::runApp('Desktop/shiny2')
shiny::runApp('Desktop/shiny2')
shiny::runApp('Desktop/shiny2')
shiny::runApp('Desktop/shiny2')
file.choose()
library(leaflet)
library(rgdal)
setwd("C:\\Users\\Kira\\OneDrive\\SHK WiJo\\wijou")
Germany <-readOGR("Germany1.kml",
"Germany divisions. Level 1", encoding="UTF-8", verbose = FALSE
)
Swiss <-readOGR("Switzerland1.kml",
"Switzerland divisions. Level 1", encoding="UTF-8", verbose = FALSE
)
Austria <- readOGR("Austria1.kml",
"Austria divisions. Level 1", encoding="UTF-8", verbose = FALSE
)
shiny::runApp()
